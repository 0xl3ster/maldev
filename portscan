param(
    [string]$target = "127.0.0.1",
    [int[]]$ports = @(1, 5, 7, 9, 13, 17, 19, 20, 21, 22, 23, 25, 26, 37, 42, 43, 49, 53, 67, 68, 69, 70, 79, 80, 88, 102, 110, 111, 113, 119, 123, 135, 137, 138, 139, 143, 161, 162, 177, 179, 194, 201, 264, 318, 389, 427, 443, 445, 465, 500, 514, 515, 520, 524, 530, 531, 543, 548, 554, 587, 631, 636, 646, 993, 995, 1025, 1026, 1027, 1028, 1029, 1030, 1080, 1100, 1234, 1241, 1433, 1434, 1521, 1589, 1723, 1900, 2000, 2001, 2049, 2082, 2083, 2100, 2121, 2222, 2302, 2483, 2484, 3000, 3128, 3268, 3389, 3690, 4333, 4444, 4899, 5000, 5060, 5432, 5555, 5800, 5900, 6000, 6666, 7000, 7070, 8000, 8080, 8081, 8443, 8888, 9000, 9090, 9999, 10000, 10001, 10002, 10010, 32768, 49152, 49153, 49154, 49155, 49156, 49157)
)

function Scan-Port {
    param(
        [string]$target,
        [int]$port
    )

    # Realiza a verificação da porta usando Test-NetConnection
    $result = Test-NetConnection -ComputerName $target -Port $port -WarningAction SilentlyContinue

    if ($result.TcpTestSucceeded) {
        Write-Host "[+] Porta $port aberta em $target" -ForegroundColor Green
    } else {
        Write-Host "[-] Porta $port fechada em $target" -ForegroundColor Red
    }
}

# Executa o port scan para cada porta especificada
foreach ($port in $ports) {
    Scan-Port -target $target -port $port
}
